service: customer-portal-services
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1
  environment:
    EMPLOYEE_TABLE: ${self:custom.employeeTableName}
    ASSIGNMENTS_TABLE: ${self:custom.assignmentTableName}
    ASSETS_TABLE: ${self:custom.assetTableName}
    METADATA_TABLE: ${self:custom.metadataTableName}
    PAY_ROLL: ${self:custom.payRollTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
      Resource:
        - !GetAtt EmployeeTable.Arn
        - !GetAtt AssignmentTable.Arn
        - !GetAtt AssetTable.Arn
        - !GetAtt MetadataTable.Arn
        - !GetAtt PayRollTable.Arn
custom:
  employeeTableName: employee-Details
  assignmentTableName: assignment-Details
  assetTableName: asset-Details-${self:provider.stage}
  metadataTableName: metadata
  payRollTableName: payRoll
  cors:
    origin: "*" # Allow requests from any origin
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false
plugins:
  - serverless-iam-roles-per-function
functions:
  employeeGet:
    handler: src/Lamda/employee/employeeHandler.getEmployee
    name: employeeGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/get/{employeeId}
          method: GET
          cors: true # Enable CORS for this endpoint
  employeeCreate:
    handler: src/Lamda/employee/employeeHandler.createEmployee
    name: employeeCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: POST
          cors: true # Enable CORS for this endpoint
  employeeUpdate:
    handler: src/Lamda/employee/employeeHandler.updateEmployee
    name: employeeUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/{employeeId}
          method: PUT
          cors: true # Enable CORS for this endpoint
  employeeGetAll:
    handler: src/Lamda/employee/employeeHandler.getAllEmployees
    name: employeeGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employees
          method: GET
          cors: true # Enable CORS for this endpoint
  assignmentCreate:
    handler: src/Lamda/assignment/assignmentHandler.createAssignment
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST
          cors: true # Enable CORS for this endpoint
  assignmentGet:
    handler: src/Lamda/assignment/assignmentHandler.getAssignmentByEmployeeId
    name: assignmentGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/{employeeId}
          method: GET
          cors: true # Enable CORS for this endpoint
  assignmentUpdate:
    handler: src/Lamda/assignment/assignmentHandler.updateAssignment
    name: assignmentUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/update/{assignmentId}/employee/{employeeId}
          method: PUT
          cors: true # Enable CORS for this endpoint
  assetCreate:
    handler: src/Lamda/asset/assetHandler.createAsset
    name: assetCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset
          method: POST
          cors: true # Enable CORS for this endpoint
  assetUpdate:
    handler: src/Lamda/asset/assetHandler.updateAssetDetails
    name: assetUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/{assetId}
          method: PUT
          cors: true # Enable CORS for this endpoint
  assetGet:
    handler: src/Lamda/asset/assetHandler.getAssetDetails
    name: assetGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/get/{employeeId}
          method: GET
          cors: true # Enable CORS for this endpoint
  assetGetAll:
    handler: src/Lamda/asset/assetHandler.getAllAssetDetails
    name: assetGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/getAll
          method: GET
          cors: true # Enable CORS for this endpoint
  assetGetAllPagenation:
    handler: src/Lamda/asset/assetHandler.getAllAssetDetails1
    name: assetGetAllPagenation
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/assetGetAllPagenation
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                pageNo: true
                pageSize: true
                sortBy: true
                sortOrder: true
  metadataCreate:
    handler: src/Lamda/metadata/metadataHandler.createMetadata
    name: metadataCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata
          method: POST
          cors: true
  metadataGet:
    handler: src/Lamda/metadata/metadataHandler.getMetadata
    name: metadataGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                metadataId: true
  metadataGetAll:
    handler: src/Lamda/metadata/metadataHandler.getAllMeatadatas
    name: metadataGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/getAll
          method: GET
  metadataGetByTypeAndStatus:
    handler: src/Lamda/metadata/metadataHandler.getMetadataByTypeAndStatus
    name: metadataGetTypeAndStatus
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/getby
          method: GET
          request:
            parameters:
              querystrings:
                type: true
                status: true
  metadataUpdate:
    handler: src/Lamda/metadata/metadataHandler.updateMetadata
    name: metadataUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/update
          method: PUT
          cors: true # Enable CORS for this endpoint
          request:
            parameters:
              querystrings:
                metadataId: true
  payRollCreate:
    handler: src/Lamda/payRoll/payRollHandler.createPayRoll
    name: payRollCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: payRoll
          method: POST
          cors: true
resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AssignmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assignmentTableName}
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmployeeIndex
            KeySchema:
              - AttributeName: employeeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    AssetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assetTableName}
        AttributeDefinitions:
          - AttributeName: assetId
            AttributeType: N
        KeySchema:
          - AttributeName: assetId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.metadataTableName}
        AttributeDefinitions:
          - AttributeName: metadataId
            AttributeType: N
        KeySchema:
          - AttributeName: metadataId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PayRollTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.payRollTableName}
        AttributeDefinitions:
          - AttributeName: payRollId
            AttributeType: N
        KeySchema:
          - AttributeName: payRollId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
