service: customer-portal-services
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1
  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"
  environment:
    EMPLOYEE_TABLE: ${self:custom.employeeTableName}
    ASSIGNMENTS_TABLE: ${self:custom.assignmentTableName}
    ASSETS_TABLE: ${self:custom.assetTableName}
    METADATA_TABLE: ${self:custom.metadataTableName}
    BANK_TABLE: ${self:custom.bankTableName}
    PF_ESI_TABLE: ${self:custom.pfTableName}
    PAYROLL_TABLE: ${self:custom.payrollTableName}
    EDUCATION_TABLE: ${self:custom.educationTableName}
    DOCUMENT_TABLE: ${self:custom.documentTableName}
    CERTIFICATION_TABLE: ${self:custom.certificationTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "s3:PutObject" # Adding permission to upload files to S3
      Resource:
        - !GetAtt EmployeeTable.Arn
        - !GetAtt AssignmentTable.Arn
        - !GetAtt AssetTable.Arn
        - !GetAtt MetadataTable.Arn
        - !GetAtt BankTable.Arn
        - !GetAtt PfDetailsTable.Arn
        - !GetAtt payrollTable.Arn
        - !GetAtt educationTable.Arn
        - !GetAtt documentTable.Arn
        - !GetAtt certificationTable.Arn
        - "arn:aws:s3:::dev-employees-education-documents/*"
        - "arn:aws:s3:::dev-employees-certification-documents/*"
        - "arn:aws:s3:::dev-empemployeedocuments/*"
custom:
  employeeTableName: employee_Details
  assignmentTableName: assignment_Details
  assetTableName: asset_Details
  metadataTableName: metadata
  bankTableName: bank
  pfTableName: pf_Details
  payrollTableName: payroll
  educationTableName: education
  documentTableName: document_details
  certificationTableName: certification
  cors:
    origin: "*" # Allow requests from any origin
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false
plugins:
  - serverless-iam-roles-per-function
functions:
  employeeGet:
    handler: src/Lamda/employee/employeeHandler.getEmployee
    name: employeeGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                employeeId: true
  employeeCreate:
    handler: src/Lamda/employee/employeeHandler.createEmployee
    name: employeeCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: POST
          cors: true # Enable CORS for this endpoint
  employeeUpdate:
    handler: src/Lamda/employee/employeeHandler.updateEmployee
    name: employeeUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: PUT
          cors: true
          request:
            parameters:
              querystrings:
                employeeId: true
  employeeGetAll:
    handler: src/Lamda/employee/employeeHandler.getAllEmployees
    name: employeeGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employees
          method: GET
          cors: true # Enable CORS for this endpoint
  assignmentCreate:
    handler: src/Lamda/assignment/assignmentHandler.createAssignment
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST
          cors: true # Enable CORS for this endpoint
  assignmentGet:
    handler: src/Lamda/assignment/assignmentHandler.getAssignmentByEmployeeId
    name: assignmentGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/{employeeId}
          method: GET
          cors: true # Enable CORS for this endpoint
  assignmentUpdate:
    handler: src/Lamda/assignment/assignmentHandler.updateAssignment
    name: assignmentUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/update
          method: PUT
          cors: true # Enable CORS for this endpoint
          request:
            parameters:
              querystrings:
                assignmentId: true
                employeeId: true
  assetCreate:
    handler: src/Lamda/asset/assetHandler.createAsset
    name: assetCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset
          method: POST
          cors: true # Enable CORS for this endpoint
  assetUpdate:
    handler: src/Lamda/asset/assetHandler.updateAssetDetails
    name: assetUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/{assetId}
          method: PUT
          cors: true # Enable CORS for this endpoint
  assetGet:
    handler: src/Lamda/asset/assetHandler.getAssetDetails
    name: assetGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/get/{employeeId}
          method: GET
          cors: true # Enable CORS for this endpoint
  assetGetAll:
    handler: src/Lamda/asset/assetHandler.getAllAssetDetails
    name: assetGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/getAll
          method: GET
          cors: true
  metadataCreate:
    handler: src/Lamda/metadata/metadataHandler.createMetadata
    name: metadataCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata
          method: POST
          cors: true
  metadataGet:
    handler: src/Lamda/metadata/metadataHandler.getMetadata
    name: metadataGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                metadataId: true
  metadataGetAll:
    handler: src/Lamda/metadata/metadataHandler.getAllMeatadatas
    name: metadataGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/getAll
          method: GET
          cors: true
  metadataGetByTypeAndStatus:
    handler: src/Lamda/metadata/metadataHandler.getMetadataByTypeAndStatus
    events:
      - http:
          path: metadata/getby
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                type: true
                status: true
  metadataUpdate:
    handler: src/Lamda/metadata/metadataHandler.updateMetadata
    name: metadataUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: metadata/update
          method: PUT
          cors: true # Enable CORS for this endpoint
          request:
            parameters:
              querystrings:
                metadataId: true
  bankCreate:
    handler: src/Lamda/bank/bankHandler.createBankDetails
    name: bankCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank
          method: POST
          cors: true
  bankGet:
    handler: src/Lamda/bank/bankHandler.getBankDetailsByEmployeeId
    name: bankGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank/{employeeId}
          method: GET
          cors: true
  bankUpdate:
    handler: src/Lamda/bank/bankHandler.updateBankDetails
    name: bankUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank/update/{bankId}
          method: PUT
          cors: true
  pfEsiUpdate:
    handler: src/Lamda/pfDetails/pfDetailsHandler.createPfEsiDetails
    name: PfEsiUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: pf
          method: PUT
          cors: true
  payrollCreate:
    handler: src/Lamda/payroll/payrollHandler.createPayroll
    name: payrollCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: payroll
          method: POST
          cors: true
  pfEsiGet:
    handler: src/Lamda/pfDetails/pfDetailsHandler.getPfEsiDetailsByEmployeeId
    name: PfEsiGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: pf/{employeeId}
          method: GET
          cors: true
  payrollGet:
    handler: src/Lamda/payroll/payrollHandler.getPayrollByEmployeeId
    name: payrollGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: payroll/get
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                employeeId: true
  educationCreate:
    handler: src/Lamda/education/educationHandler.createEducation
    name: educationCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: education
          method: POST
  educationUpload:
    handler: src/Lamda/education/educationHandler.uploadEducation
    name: educationUpload
    memorySize: 256
    timeout: 240
    events:
      - http:
          path: education/{educationId}
          method: PUT
  createDocument:
    handler: src/Lamda/documents/documentHandler.createEmployeeDocument
    name: createDocument
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: document
          method: POST
          cors: true
  updateDocument:
    handler: src/Lamda/documents/documentHandler.updateEmployeeDocument
    name: udpateDocument
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: document/update
          method: PUT
          cors: true
          request:
            parameters:
              querystrings:
                documentId: true
                employeeId: true
  certificationCreate:
    handler: src/Lamda/certification/certificationHandler.createCertification
    name: certificationCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: certification
          method: POST
  certificationUpload:
    handler: src/Lamda/certification/certificationHandler.uploadCertification
    name: certificationUpload
    memorySize: 256
    timeout: 240
    events:
      - http:
          path: certification/{certificationId}
          method: PUT
  certificationUpdate:
    handler: src/Lamda/certification/certificationHandler.updateCertification
    name: certificationUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: certification/update
          method: PUT
          cors: true
          request:
            parameters:
              querystrings:
                certificationId: true
                employeeId: true
  getEmployeesByRole:
    handler: src/Lamda/employee/employeeHandler.getEmployeesByRole
    events:
      - http:
          path: employee/role
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                role: true
  uploadDocument:
    handler: src/Lamda/documents/documentHandler.uploadEmployeeDocument
    name: uploadEmployeeDocument
    memorySize: 256
    timeout: 240
    events:
      - http:
          path: document/{documentId}
          method: PUT
          cors: true
resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AssignmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assignmentTableName}
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmployeeIndex
            KeySchema:
              - AttributeName: employeeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    AssetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assetTableName}
        AttributeDefinitions:
          - AttributeName: assetId
            AttributeType: N
        KeySchema:
          - AttributeName: assetId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.metadataTableName}
        AttributeDefinitions:
          - AttributeName: metadataId
            AttributeType: N
        KeySchema:
          - AttributeName: metadataId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BankTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bankTableName}
        AttributeDefinitions:
          - AttributeName: bankId
            AttributeType: N
        KeySchema:
          - AttributeName: bankId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PfDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.pfTableName}
        AttributeDefinitions:
          - AttributeName: pfId
            AttributeType: N
        KeySchema:
          - AttributeName: pfId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    payrollTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.payrollTableName}
        AttributeDefinitions:
          - AttributeName: payrollId
            AttributeType: N
        KeySchema:
          - AttributeName: payrollId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    educationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.educationTableName}
        AttributeDefinitions:
          - AttributeName: educationId
            AttributeType: N
        KeySchema:
          - AttributeName: educationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    documentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.documentTableName}
        AttributeDefinitions:
          - AttributeName: documentId
            AttributeType: N
        KeySchema:
          - AttributeName: documentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    certificationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.certificationTableName}
        AttributeDefinitions:
          - AttributeName: certificationId
            AttributeType: N
        KeySchema:
          - AttributeName: certificationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
